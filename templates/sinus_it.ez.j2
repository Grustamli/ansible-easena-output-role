\User declarations :
#define NB_SIN {{ NB_SIN | mandatory }}
#define MIN_AMP {{ MIN_AMP | mandatory }}
#define MAX_AMP {{ MAX_AMP | mandatory }}
#define MIN_FREQ {{ MIN_FREQ | mandatory }}
#define MAX_FREQ {{ MAX_FREQ | mandatory }}
#define MIN_PH {{ MIN_PH | mandatory }}
#define MAX_PH {{ MAX_PH | mandatory }}

#define NB_SAMPLES {{ NB_SAMPLES | mandatory}}
int nACC_MULT={{ nACC_MULT | mandatory }};
float fX_MIN;
float fX_MAX;

float fSAMPLE[NB_SAMPLES][2]; //  2nd dimension is x value [0] and y value [1]
float fTARGET_SIN[NB_SIN][3]; // [0] = amplitude, [1] = frequence, [2] = phase

__device__  float gpuSample[NB_SAMPLES][2];

\end

\User functions:

__device__ __host__ inline float fScoreOnGPU(float genome[NB_SIN*3], int nNbSamples, int nNbSin){

float y,fScore=0.0;
#ifndef __CUDA_ARCH__

for (int i=0;i<nNbSamples;i++){y=0; // writing the intialization of y here for clarity
  for(int j=0;j<nNbSin;j++)
    y+=genome[3*j+0]*sin(genome[3*j+1]*fSAMPLE[i][0]+genome[3*j+2]);
  fScore+=powf(fSAMPLE[i][1]-y,2); // square of the difference to focus on the large values
}
#else

for (int i=0;i<nNbSamples;i++){y=0; // writing the intialization of y here for clarity
  for(int j=0;j<nNbSin;j++)
    y+=genome[3*j+0]*sin(genome[3*j+1]*gpuSample[i][0]+genome[3*j+2]);
  fScore+=powf(gpuSample[i][1]-y,2); // square of the difference to focus on the large values
}

#endif

//return fScore/NB_SAMPLES; // to normalize the sum
 fScore/= NB_SAMPLES;
fScore=pow(fScore, .5);
return fScore;
}

\end

\User CUDA:
cudaMemcpyToSymbol(gpuSample, fSAMPLE, NB_SAMPLES*2*sizeof(int));
\end

B
\Before everything else function:

int interval=setVariable("u3",1);
// meaning that if interval is not set on the command line, value 1 will be returned.
if (interval==1) {fX_MIN=5000; fX_MAX=70536;}
else if (interval==2) {fX_MIN=5000; fX_MAX=78728;}
else if (interval==3) {fX_MIN=5000; fX_MAX=86920;}
else if (interval==4) {fX_MIN=5000; fX_MAX=95112;}
else if (interval==5) {fX_MIN=5000; fX_MAX=103304;}
else {fX_MIN=5000;fX_MAX=111496;}


// We start by creating NB_SIN sines
/*
// this code will always create a new set of sines
for (int i=0;i<NB_SIN;i++){
  fTARGET_SIN[i][0]=random(MIN_AMP, MAX_AMP);
  fTARGET_SIN[i][1]=random(MIN_FREQ, MAX_FREQ);
  fTARGET_SIN[i][2]=random(MIN_PH, MAX_PH);
}
// But for experimenting, it may be nicer to have a fixed set of sines
// The values below have been obtained with seed 2 ($ ./sinus_it -- seed 2)
*/

fTARGET_SIN[1][0]=100000.0; fTARGET_SIN[1][1]=0.269036561; fTARGET_SIN[1][2]=3.34788863253907;
//fTARGET_SIN[1][0]=6575.936408999999; fTARGET_SIN[1][1]=0.26883782722871086; fTARGET_SIN[1][2]=3.356079242741512;
fTARGET_SIN[0][0]=68139.08824000001; fTARGET_SIN[0][1]=0.269033436; fTARGET_SIN[0][2]=4.483455040543435;

//Multiply the frequencies by nACC_MULT
for (int j=0;j<NB_SIN;j++) 
fTARGET_SIN[j][1]*=nACC_MULT;

// Now, we create NB_SAMPLES within [X_MIN, X_MAX[i]

for (int i=0;i<NB_SAMPLES;i++){
fSAMPLE[i][0]=random((int)fX_MIN,(int)fX_MAX)/(float)nACC_MULT;

// Creating Non Uniformly Sampled (NUS) x values
 fSAMPLE[i][1]=0;                    
  for (int j=0;j<NB_SIN;j++)          // Create y value by summing the sines
    fSAMPLE[i][1]+=fTARGET_SIN[j][0]*sin(fTARGET_SIN[j][1]*fSAMPLE[i][0]+fTARGET_SIN[j][2]);
                  // amplitude * sin (freq * x + phase)
}
\end

\After everything else function:
printf("--------------------------------------------------------\n");
printf("NB_SAMPLES:%d,fX_MIN:%f,fx_MAX:%f,nACC_MULT:%d",NB_SAMPLES,fX_MIN,fX_MAX,nACC_MULT);

for (int j=0;j<NB_SIN;j++){
fTARGET_SIN[j][1]/=(float)nACC_MULT;
bBest->Sin[j*3+1]/=(float)nACC_MULT;
}

printf("--------------------------------------------------------\n");
printf("Target function: \ny=%.11f*sin(%.11f*x+%.11f)",fTARGET_SIN[0][0],fTARGET_SIN[0][1],fTARGET_SIN[0][2]);
for (int i=1;i<NB_SIN;i++)
  printf("+%.11f*sin(%.11f*x+%.11f)",fTARGET_SIN[i][0],fTARGET_SIN[i][1],fTARGET_SIN[i][2]);
printf("\n--------------------------------------------------------\n");
printf("Obtained function sorted by frequency: \ny=%.11f*sin(%.11f*x+%.11f)",bBest->Sin[0],bBest->Sin[1],bBest->Sin[2]);
for (int i=1;i<NB_SIN;i++)
  printf("+%.11f*sin(%.11f*x+%.11f)",bBest->Sin[i*3+0],bBest->Sin[i*3+1],bBest->Sin[i*3+2]);
printf("\n--------------------------------------------------------\n");
printf("CSV format (copy/paste into a csv file):\n");
printf("\t\tTARGET\t\t\t\t\tOBTAINED (sorted by frequency)\n");
printf("Amplitude\tFrequency\tPhase\t\tAmplitude\tFrequency\tPhase\n");
for (int i=0;i<NB_SIN;i++)
 printf("%.11f\t%.11f\t%.11f\t%.11f\t%.11f\t%.11f\n",fTARGET_SIN[i][0],fTARGET_SIN[i][1],fTARGET_SIN[i][2],bBest->Sin[i*3+0],bBest->Sin[i*3+1],bBest->Sin[i*3+2]);

printf("Amplitude error\tFrequency error\tPhase error\n");
for (int i=0;i<NB_SIN;i++)
printf("%.11f\t%.11f\t%.11f\n",(bBest->Sin[i*3+0]-fTARGET_SIN[i][0])/fTARGET_SIN[i][0],(bBest->Sin[i*3+1]-fTARGET_SIN[i][1])/(fTARGET_SIN[i][1]),(bBest->Sin[i*3+2]-fTARGET_SIN[i][2])/fTARGET_SIN[i][2]);

printf("Fitness=%f\n",bBest->fitness);
\end

/*
\After everything else function:
printf("--------------------------------------------------------\n");
printf("%d,%f,%f",NB_SAMPLES,fX_MIN,fX_MAX);
printf("--------------------------------------------------------\n");
printf("Target function: \ny=%.11f*sin(%.11f*x+%.11f)",fTARGET_SIN[0][0],fTARGET_SIN[0][1]/(float)nACC_MULT,fTARGET_SIN[0][2]);
for (int i=1;i<NB_SIN;i++)
  printf("+%.11f*sin(%.11f*x+%.11f)",fTARGET_SIN[i][0],fTARGET_SIN[i][1]/(float)nACC_MULT,fTARGET_SIN[i][2]);
printf("\n--------------------------------------------------------\n");
printf("Obtained function sorted by frequency: \ny=%.11f*sin(%.11f*x+%.11f)",bBest->Sin[0],bBest->Sin[1]/(float)nACC_MULT,bBest->Sin[2]);
for (int i=1;i<NB_SIN;i++)
  printf("+%.11f*sin(%.11f*x+%.11f)",bBest->Sin[i*3+0],bBest->Sin[i*3+1]/(float)nACC_MULT,bBest->Sin[i*3+2]);
printf("\n--------------------------------------------------------\n");
printf("CSV format (copy/paste into a csv file):\n");
printf("\t\tTARGET\t\t\t\t\tOBTAINED (sorted by frequency)\n");
printf("Amplitude\tFrequency\tPhase\t\tAmplitude\tFrequency\tPhase\n");
for (int i=0;i<NB_SIN;i++)
 printf("%.11f\t%.11f\t%.11f\t%.11f\t%.11f\t%.11f\n",fTARGET_SIN[i][0],fTARGET_SIN[i][1]/(float)nACC_MULT,fTARGET_SIN[i][2],bBest->Sin[i*3+0],bBest->Sin[i*3+1]/(float)nACC_MULT,bBest->Sin[i*3+2]);

printf("Amplitude error\tFrequency error\tPhase error\n");
for (int i=0;i<NB_SIN;i++)
printf("%.11f\t%.11f\t%.11f\n",(bBest->Sin[i*3+0]-fTARGET_SIN[i][0])/fTARGET_SIN[i][0],(bBest->Sin[i*3+1]/(float)nACC_MULT-fTARGET_SIN[i][1]/(float)nACC_MULT)/(fTARGET_SIN[i][1]/(float)nACC_MULT),(bBest->Sin[i*3+2]-fTARGET_SIN[i][2])/fTARGET_SIN[i][2]);

printf("Fitness=%f\n",bBest->fitness);
\end
*/


\At the beginning of each generation function:
\end

\At the end of each generation function:
  //cout << "At the end of each generation function called" << endl;
\end

\At each generation before reduce function:
  //cout << "At each generation before replacement function called" << endl;
\end

\User classes :
GenomeClass {           // EASEA only implements single dimension arrays, so
  float Sin[NB_SIN*3];  // sin[i*3+0] = amplitude of sine i
                        // sin[i*3+1] = frequency of sine i
                        // sin[i*3+2] = phase of sine i
}
\end

\GenomeClass::display:
\end

\GenomeClass::initialiser : // "initializer" is also accepted
for(int i=0; i<NB_SIN; i++){
  Genome.Sin[i*3+0]=random(MIN_AMP, MAX_AMP);
  Genome.Sin[i*3+1]=random(MIN_FREQ, MAX_FREQ);
  Genome.Sin[i*3+2]=random(MIN_PH, MAX_PH);
}
\end

\GenomeClass::crossover : // create child (initialized to parent1) out of parent1 and parent2 
int nLocus=random(1,NB_SIN);
for (int i=nLocus;i<NB_SIN;i++){ // we take parent2 genes after nLocus point
  child.Sin[i*3+0]=parent2.Sin[i*3+0];
  child.Sin[i*3+1]=parent2.Sin[i*3+1];
  child.Sin[i*3+2]=parent2.Sin[i*3+2];
}
\end

\GenomeClass::mutator: // all the values in here are found by trial and error
float fpMut=3/((float)NB_SIN);  // Probability of mutating a sine
for (int i=0;i<NB_SIN;i++)
  if (tossCoin(fpMut)){ // probability of mutating a value in a sine
/*
    if (tossCoin(1)) Genome.Sin[i*3+0]+=2.0-random(0.0, 4.0); 
    if (tossCoin(.233)) Genome.Sin[i*3+1]+=0.1-random(0.0, 0.2);
    if (tossCoin(.233)) Genome.Sin[i*3+2]+=0.4-random(0.0, 0.8);
*/

if (tossCoin(1)) Genome.Sin[i*3+0]+=2.0-random(0.0, 4.0);
    if (tossCoin(.233)) Genome.Sin[i*3+1]+=0.1-random(0.0, 0.2);
    if (tossCoin(.233)) Genome.Sin[i*3+2]+=0.4-random(0.0, 0.8);

  }

// This is a subtlety to improve the efficiency of the crossover
for (int i=0;i<NB_SIN-1;i++){  // an evo-bub sort on the frequency :-)  
  if (Genome.Sin[i*3+1]>Genome.Sin[(i+1)*3+1]){ // only one bubble goes up
    float ampTemp, freqTemp, phaseTemp; // the generations do the global sorting
    ampTemp=Genome.Sin[i*3+0];freqTemp=Genome.Sin[i*3+1];phaseTemp=Genome.Sin[i*3+2];
    Genome.Sin[i*3+0]=Genome.Sin[(i+1)*3+0];
    Genome.Sin[i*3+1]=Genome.Sin[(i+1)*3+1];
    Genome.Sin[i*3+2]=Genome.Sin[(i+1)*3+2];
    Genome.Sin[(i+1)*3+0]=ampTemp;
    Genome.Sin[(i+1)*3+1]=freqTemp;
    Genome.Sin[(i+1)*3+2]=phaseTemp;
} }
\end




\GenomeClass::evaluator: // Returns the score
  return (double) fScoreOnGPU(Genome.Sin,NB_SAMPLES,NB_SIN); 
\end

\User Makefile options:
\end

\Default run parameters :
  Number of generations : {{ NB_GEN | mandatory }}
  Time limit: {{ TIME_LIMIT | mandatory }}
  Population size : {{ POPULATION_SIZE | mandatory }}
  Offspring size : {{ OFFSPRING_SIZE | mandatory }} 
  Mutation probability : {{ MUT_PROB | mandatory }} 
  Crossover probability : {{ XOVER_PROB | mandatory }}
  Evaluator goal : {{ EVAL_GOAL | mandatory }}
  Selection operator: {{ SELECTION_OPERATOR | mandatory }}
  Surviving parents: {{ SURVIVING_PARENTS | mandatory }}  
  Surviving offspring: {{ SURVIVING_OFFSPRING | mandatory }}
  Reduce parents operator: {{ REDUCE_PARENTS_OPERATOR | mandatory }}
  Reduce offspring operator: {{ REDUCE_OFFSPRING_OPERATOR | mandatory }}
  Final reduce operator: {{ FINAL_REDUCE_OPERATOR | mandatory }}

  Elitism: {{ ELITISM | mandatory }}
  Elite: {{ ELITE | mandatory }}
  Print stats: {{ PRINT_STATS | mandatory }}			
  Generate csv stats file: {{ GEN_CSV_STATS_FILE | mandatory }}			
  Generate gnuplot script: {{ GEN_GNUPLOT_SCRIPT | mandatory }} 
  Generate R script: {{ GEN_R_SCRIPT | mandatory }}
  Plot stats: {{ PLOT_STATS | mandatory }}			

  Remote island model: {{ REMOTE_ISLAND_MODEL | mandatory }}
  IP file: {{ IP_FILE | mandatory }}
  Server port : {{ SERVER_PORT | mandatory }}
  Migration probability: {{ MIGRATION_PROB | mandatory }} 

  Save population: {{ SAVE_POPULATION | mandatory }}
  Start from file: {{ START_FROM_FILE | mandatory }}
\end
